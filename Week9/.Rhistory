# Ctrl + L to clear the console.
# Load required packages using the custom function
required_packages <- c("dplyr", "lme4")
load_or_install(required_packages)
cat("All required packages are installed and loaded successfully.\n")
# Load the filtered data
load("filtered_data.RData")
#### CLASSICAL MIXED-EFFECTS REGRESSION (lme4) ----
# Fit the classical linear mixed-effects model
rt_model_classic <- lmer(log(rt) ~ task * congruency + (1 | subject), data = df_filtered)
# Summary of the classical model
cat("### Classical Linear Mixed-Effects Model:\n")
summary(rt_model_classic)
#### SCRIPT 4 - INFERENTIAL STATISTICS ----
#### PREPARE WORKSPACE & LOAD DATA ----
# Clean the environment
# Ctrl + Shift + F10 to restart the R session (clear workspace and packages)
# Cmd + Shift + F10 (for mac)
# Ctrl + L to clear the console.
# Load required packages using the custom function
required_packages <- c("dplyr", "lme4")
load_or_install(required_packages)
cat("All required packages are installed and loaded successfully.\n")
# Load the filtered data
load("filtered_data.RData")
#### CLASSICAL MIXED-EFFECTS REGRESSION (lme4) ----
# Fit the classical linear mixed-effects model
rt_model_classic <- lmer(log(rt) ~ task * congruency + (1 | subject), data = df_filtered)
# Summary of the classical model
cat("### Classical Linear Mixed-Effects Model:\n")
summary(rt_model_classic)
# Load the lme4 package
library(lme4)
# Fit the linear mixed-effects model
rt_model <- lmer(rt ~ task * congruency + (1 | subject), data = df_filtered)
# Summary of the model
summary(rt_model)
library(BayesFactor)
#### SCRIPT 4 - INFERENTIAL STATISTICS ----
#### PREPARE WORKSPACE & LOAD DATA ----
# Clean the environment
# Ctrl + Shift + F10 to restart the R session (clear workspace and packages)
# Cmd + Shift + F10 (for mac)
# Ctrl + L to clear the console.
# Load required packages using the custom function
required_packages <- c("dplyr", "lme4", "BayesFactor")
load_or_install(required_packages)
cat("All required packages are installed and loaded successfully.\n")
# Load the filtered data
load("filtered_data.RData")
#### CLASSICAL MIXED-EFFECTS REGRESSION (lme4) ----
# Fit the linear mixed-effects model
> rt_model <- lmer(rt ~ task * congruency + (1 | subject), data = df_filtered)
# Random slopes model
slope_model <- lmer(rt ~ task * congruency + (task + congruency | subject), data = df_filtered)
# Summary of the model
summary(slope_model)
#### SCRIPT 4 - INFERENTIAL STATISTICS ----
#### PREPARE WORKSPACE & LOAD DATA ----
# Clean the environment
# Ctrl + Shift + F10 to restart the R session (clear workspace and packages)
# Cmd + Shift + F10 (for mac)
# Ctrl + L to clear the console.
# Load required packages using the custom function
required_packages <- c("dplyr", "lme4", "BayesFactor")
load_or_install(required_packages)
cat("All required packages are installed and loaded successfully.\n")
# Load the filtered data
load("filtered_data.RData")
#### CLASSICAL MIXED-EFFECTS REGRESSION (lme4) ----
# Fit the linear mixed-effects model
rt_model <- lmer(rt ~ task * congruency + (1 | subject), data = df_filtered)
# Summary of the classical model
cat("### Classical Linear Mixed-Effects Model:\n")
summary(rt_model)
# Fit the classical linear mixed-effects model - log
rt_model_log <- lmer(log(rt) ~ task * congruency + (1 | subject), data = df_filtered)
# Summary of the classical model
cat("### Classical Linear Mixed-Effects Model - log:\n")
summary(rt_model_log)
# cdkk
# Random slopes model
slope_model <- lmer(rt ~ task * congruency + (task + congruency | subject), data = df_filtered)
# Summary of the model
summary(slope_model)
library(BayesFactor)
# Run a Bayesian ANOVA (equivalent to regression with categorical predictors)
bf_model <- anovaBF(
formula = rt ~ task * congruency + subject,
data = df_filtered,
whichRandom = "subject", # Define 'subject' as a random factor
iterations = 10000 # Number of iterations for the Bayesian analysis
)
# View the results
print(bf_model)
#### SCRIPT 4 - INFERENTIAL STATISTICS ----
#### PREPARE WORKSPACE & LOAD DATA ----
# Clean the environment
# Ctrl + Shift + F10 to restart the R session (clear workspace and packages)
# Cmd + Shift + F10 (for mac)
# Ctrl + L to clear the console.
# Load required packages using the custom function
required_packages <- c("dplyr", "lme4", "BayesFactor")
load_or_install(required_packages)
cat("All required packages are installed and loaded successfully.\n")
# Load the filtered data
load("filtered_data.RData")
#### CLASSICAL MIXED-EFFECTS REGRESSION (lme4) ----
# Fit the linear mixed-effects model
rt_model <- lmer(rt ~ task * congruency + (1 | subject), data = df_filtered)
# Summary of the classical model
cat("### Classical Linear Mixed-Effects Model:\n")
summary(rt_model)
# Applying log-transformation to rt to address rt skewed distribution
# Fit the classical linear mixed-effects model - log
rt_model_log <- lmer(log(rt) ~ task * congruency + (1 | subject), data = df_filtered)
# Summary of the classical model - log
cat("### Classical Linear Mixed-Effects Model - log:\n")
summary(rt_model_log)
#### MOVING TO SIMPLER ANALYSES DUE TO SINGULARITY ISSUES ####
# The boundary (singular) fit warning indicates insufficient variance
# to justify random effects. We'll shift to simpler analyses:
# 1. Fixed-effects models (lm) without random effects.
# 2. Bayesian analysis using BayesFactor for model comparison.
# FIXED-EFFECTS MODEL (lm)
# Fit a linear model without random effects
lm_model <- lm(rt ~ task * congruency, data = df_filtered)
# Summary of the linear model
cat("### Fixed-Effects Model Summary:\n")
summary(lm_model)
# BAYESIAN ANALYSIS USING BAYESFACTOR
# Run a Bayesian analysis without random effects
bf_model <- anovaBF(
formula = rt ~ task * congruency + subject,
data = df_filtered,
whichRandom = "subject", # Define 'subject' as a random factor
iterations = 10000 # Number of iterations for Bayesian analysis
)
# View the Bayesian model results
cat("### Bayesian Model Summary:\n")
print(bf_model)
library(broom.mixed)
# Residuals plot
residuals <- resid(lm_model)
ggplot(data.frame(residuals), aes(x = residuals)) +
geom_histogram(bins = 30, fill = "#1f77b4", color = "black") +
labs(
title = "Residuals Distribution",
x = "Residuals",
y = "Count"
) +
theme_minimal()
# Mean reaction times by condition
agg_data <- df_filtered %>%
group_by(task, congruency) %>%
summarise(mean_rt = mean(rt, na.rm = TRUE), .groups = "drop")
# Interaction plot
ggplot(agg_data, aes(x = task, y = mean_rt, fill = congruency)) +
geom_bar(stat = "identity", position = position_dodge(), color = "black") +
labs(
title = "Interaction of Task and Congruency",
x = "Task",
y = "Mean Reaction Time (ms)",
fill = "Congruency"
) +
scale_fill_manual(values = c("congruent" = "#1f77b4", "incongruent" = "#ff7f0e")) +
theme_minimal()
# Posterior distribution plots
plot(bf_model)
# Draw posterior samples
posterior_samples <- posterior(bf_model, iterations = 10000)
?isSingular
# File: functions.R
sum_two_numbers <- function(a, b) {
return(a + b)
}
multiply_two_numbers <- function(a, b) {
return(a * b)
}
source("Week9/functions.R")  # נתיב יחסי
source("functions.R")
getwd()
setwd("Users/itamar/Documents/Week9")
setwd("C:/Users/itamar/Documents/Week9")
setwd(/Users/itamar/Documents/GitHub/r_course)
setwd(Users/itamar/Documents/GitHub/r_course)
setwd(/Users/itamar/Documents/GitHub/r_course)
setwd(Users/itamar/Documents/GitHub/r_course)
setwd("/Users/itamar/Documents/GitHub/r_course")
getwd()
source("functions.R")
setwd("/Users/itamar/Documents/GitHub/r_course/week9")
getwd()
source("functions.R")
sum_two_numbers(3, 7)  # הקלט: 3 ו-7
process_input <- function(input) {
if (is.character(input)) {  # בודקים אם הקלט הוא מחרוזת
print(paste("זה טקסט שהוזן:", input))  # מדפיסים את הטקסט
} else if (is.numeric(input)) {  # בודקים אם הקלט הוא מספרים
print(paste("זה מספר או וקטור מספרי, והסכום הוא:", sum(input)))
} else {
print("הקלט אינו מחרוזת או מספר")
}
}
process_input("שלום!")  # פלט: "זה טקסט שהוזן: שלום!"
process_input(c(1, 2, 3))  # פלט: "זה מספר או וקטור מספרי, והסכום הוא: 6"
process_input(TRUE)  # פלט: "הקלט אינו מחרוזת או מספר"
multiply_even_odd <- function(numbers) {
# סינון של מספרים שונים
non_zero_numbers <- numbers[numbers != 0]  # התעלמות מאפסים
even_numbers <- non_zero_numbers[non_zero_numbers %% 2 == 0]  # זוגיים
odd_numbers <- non_zero_numbers[non_zero_numbers %% 2 != 0]  # אי-זוגיים
# חישוב מכפלות
even_product <- ifelse(length(even_numbers) > 0, prod(even_numbers), 1)  # אם אין זוגיים, החזר 1
odd_product <- ifelse(length(odd_numbers) > 0, prod(odd_numbers), 1)    # אם אין אי-זוגיים, החזר 1
# הצגת התוצאות
cat("מכפלת הזוגיים:", even_product, "\n")
cat("מכפלת האי-זוגיים:", odd_product, "\n")
}
# וקטור לדוגמה
numbers <- c(2, 3, 0, 4, 5, 6, 0)
# קריאה לפונקציה
multiply_even_odd(numbers)
x1 = 2
x2 = 3
Multiplication <- function(x1, x2) {
x3 = 1000
y = x1 * x3
return(y)
}
print(Multiplication(x1, x2))
ֿ
x1 = 2
x2 = 3
Multiplication <- function(x1, x2) {
x3 = 1000
y = x1 * x3
return(y)
}
print(Multiplication(x1, x2))
ls()
Multiplication <- function(x1, x2) {
browser()  # עצירה כאן לבדיקת המשתנים
x3 = 1000
y = x1 * x3
return(y)
}
x3
n
Multiplication <- function(x1, x2) {
browser()  # עצירה כאן
x3 = 1000
y = x1 * x3
return(y)
}
print(Multiplication(2, 3))
x3
/
q
Multiplication <- function(x1, x2) {
browser()  # עצירה כאן
x3 = 1000
y = x1 * x3
return(y)
}
print(Multiplication(2, 3))
x3
set.seed(123)  # קביעת seed לשחזור
analysis_df <- data.frame(
subject_id = 1:15,  # מספר נבדק
age = sample(18:80, 15, replace = TRUE),  # גיל אקראי בין 18 ל-80
gender = sample(c("זכר", "נקבה"), 15, replace = TRUE),  # מגדר
reaction_time = round(rgamma(15, shape = 2, scale = 1500)),  # זמן תגובה
depression = round(rnorm(15, mean = 50, sd = 20)),  # דיכאון
sleep_hours = round(rnorm(15, mean = 7, sd = 2))  # זמן שינה ממוצע
)
# תיקון ערכים מחוץ לטווח
analysis_df$age[analysis_df$age < 18] <- 18
analysis_df$age[analysis_df$age > 80] <- 80
analysis_df$reaction_time[analysis_df$reaction_time < 200] <- 200
analysis_df$reaction_time[analysis_df$reaction_time > 6000] <- 6000
analysis_df$depression[analysis_df$depression < 0] <- 0
analysis_df$depression[analysis_df$depression > 100] <- 100
analysis_df$sleep_hours[analysis_df$sleep_hours < 2] <- 2
analysis_df$sleep_hours[analysis_df$sleep_hours > 12] <- 12
# הצגת הדאטה
print(analysis_df)
# Setting a seed for reproducibility
set.seed(123)
# Creating the data frame
analysis_df <- data.frame(
subject_id = 1:15,  # Subject ID
age = sample(18:80, 15, replace = TRUE),  # Age sampled uniformly
gender = sample(c("Male", "Female"), 15, replace = TRUE, prob = c(0.5, 0.5)),  # Gender sampled uniformly
reaction_time = round(rgamma(15, shape = 2, scale = 1500)),  # Reaction time (Gamma distribution)
depression = round(rnorm(15, mean = 50, sd = 20)),  # Depression (Normal distribution)
sleep_hours = round(rnorm(15, mean = 7, sd = 2))  # Average sleep hours (Normal distribution)
)
# Ensuring values are within specified ranges
analysis_df$reaction_time[analysis_df$reaction_time < 200] <- 200
analysis_df$reaction_time[analysis_df$reaction_time > 6000] <- 6000
analysis_df$depression[analysis_df$depression < 0] <- 0
analysis_df$depression[analysis_df$depression > 100] <- 100
analysis_df$sleep_hours[analysis_df$sleep_hours < 2] <- 2
analysis_df$sleep_hours[analysis_df$sleep_hours > 12] <- 12
# Display the data frame
print(analysis_df)
# Function to generate descriptive statistics
generate_statistics <- function(data) {
# Check if input is a data frame
if (!is.data.frame(data)) {
stop("Input must be a data frame")
}
# Create an empty list to store results
results <- list()
# Loop through each column in the data frame
for (col_name in colnames(data)) {
col_data <- data[[col_name]]  # Extract column data
if (class(col_data) %in% c("numeric", "integer")) {  # Continuous variables
stats <- data.frame(
variable = col_name,
min = min(col_data, na.rm = TRUE),
max = max(col_data, na.rm = TRUE),
mean = mean(col_data, na.rm = TRUE)
)
} else if (class(col_data) %in% c("factor", "character")) {  # Categorical variables
levels_table <- as.data.frame(table(col_data))
colnames(levels_table) <- c("level", "frequency")
stats <- data.frame(
variable = col_name,
summary = paste(levels_table$level, levels_table$frequency, sep = ": ", collapse = ", ")
)
} else {  # Unsupported data types
stats <- data.frame(
variable = col_name,
message = "Unsupported data type"
)
}
# Add the stats for the column to the results list
results[[col_name]] <- stats
}
# Combine all results into a single data frame
results_df <- do.call(rbind, results)
rownames(results_df) <- NULL
return(results_df)
}
# Load the functions file
source("functions.R")
# Generate descriptive statistics using the function
results <- generate_statistics(analysis_df)
# Load the functions file
source("functions.R")
# Generate descriptive statistics using the function
results <- generate_statistics(analysis_df)
# Print the results
print(results)
# Setting a seed for reproducibility
set.seed(123)
# Define the number of subjects
n_subjects <- 200  # Change this to any number of subjects
# Creating the data frame
analysis_df <- data.frame(
subject_id = 1:n_subjects,  # Subject ID
age = sample(18:80, n_subjects, replace = TRUE),  # Age sampled uniformly
gender = sample(c("Male", "Female"), n_subjects, replace = TRUE, prob = c(0.5, 0.5)),  # Gender sampled uniformly
reaction_time = round(rgamma(n_subjects, shape = 2, scale = 1500)),  # Reaction time (Gamma distribution)
depression = round(rnorm(n_subjects, mean = 50, sd = 20)),  # Depression (Normal distribution)
sleep_hours = round(rnorm(n_subjects, mean = 7, sd = 2))  # Average sleep hours (Normal distribution)
)
# Ensuring values are within specified ranges
analysis_df$reaction_time[analysis_df$reaction_time < 200] <- 200
analysis_df$reaction_time[analysis_df$reaction_time > 6000] <- 6000
analysis_df$depression[analysis_df$depression < 0] <- 0
analysis_df$depression[analysis_df$depression > 100] <- 100
analysis_df$sleep_hours[analysis_df$sleep_hours < 2] <- 2
analysis_df$sleep_hours[analysis_df$sleep_hours > 12] <- 12
# Load the functions file
source("functions.R")
# Generate descriptive statistics using the function
results <- generate_statistics(analysis_df)
# Print the results
print(results)
# Load the functions file
source("functions.R")
# Case 1: Data frame with fewer than 10 rows
small_df <- analysis_df[1:5, ]
# This should trigger the "Data is too short" error
tryCatch({
print(generate_statistics(small_df))
}, error = function(e) {
print(e$message)
})
# Case 2: Using a subject range
# Generate statistics for subject IDs between 5 and 10
filtered_results <- generate_statistics(analysis_df, subject_start = 5, subject_end = 10)
filtered_results <- generate_statistics(analysis_df, subject_start = 5, subject_end = 10)
source("functions.R")
filtered_results <- generate_statistics(analysis_df, subject_start = 5, subject_end = 10)
print(filtered_results)
source("functions.R")
source("functions.R")
# Load the functions file
source("functions.R")
# Case 1: Fewer than 10 rows AFTER filtering
tryCatch({
# This should trigger "Data is too short" because the filtered range contains fewer than 10 rows
filtered_results <- generate_statistics(analysis_df, subject_start = 12, subject_end = 15)
print(filtered_results)
}, error = function(e) {
print(e$message)  # Print the error message
})
# Case 2: Valid range with more than 10 rows
tryCatch({
filtered_results <- generate_statistics(analysis_df, subject_start = 5, subject_end = 15)
print(filtered_results)
}, error = function(e) {
print(e$message)
})
# R Course: Data Analysis Script
# <Week 9> Assignment by <Itamar Ronel>, ID <032702391>
# Script: analysis.R
#### PREPARE WORKSPACE ----
# Clean the environment
rm(list = ls())
cat("\014")  # Clear the console
# Load required packages
library(dplyr)
library(tidyr)
#### CREATE DATA FRAME ----
# Generate and save the data frame for analysis
# (Include the code for creating `data_df` here)
# Setting a seed for reproducibility
set.seed(123)
# Define the number of subjects
n_subjects <- 200  # Change this to any number of subjects
# Creating the data frame
data_df <- data.frame(
subject_id = 1:n_subjects,  # Subject ID
age = sample(18:80, n_subjects, replace = TRUE),  # Age sampled uniformly
gender = sample(c("Male", "Female"), n_subjects, replace = TRUE, prob = c(0.5, 0.5)),  # Gender sampled uniformly
reaction_time = round(rgamma(n_subjects, shape = 2, scale = 1500)),  # Reaction time (Gamma distribution)
depression = round(rnorm(n_subjects, mean = 50, sd = 20)),  # Depression (Normal distribution)
sleep_hours = round(rnorm(n_subjects, mean = 7, sd = 2))  # Average sleep hours (Normal distribution)
)
# Ensuring values are within specified ranges
analysis_df$reaction_time[analysis_df$reaction_time < 200] <- 200
# R Course: Data Analysis Script
# Week 9 Assignment by Itamar Ronel, ID 032702391
# Script: analysis.R
#### PREPARE WORKSPACE ----
# Clean the environment
rm(list = ls())
cat("\014")  # Clear the console
# Load required packages
library(dplyr)
library(tidyr)
#### CREATE DATA FRAME ----
# Generate and save the data frame for analysis
# Setting a seed for reproducibility
set.seed(123)
# Define the number of subjects
n_subjects <- 200  # Change this to any number of subjects
# Creating the data frame
data <- data.frame(
subject_id = 1:n_subjects,  # Subject ID
age = sample(18:80, n_subjects, replace = TRUE),  # Age sampled uniformly
gender = sample(c("Male", "Female"), n_subjects, replace = TRUE, prob = c(0.5, 0.5)),  # Gender sampled uniformly
reaction_time = round(rgamma(n_subjects, shape = 2, scale = 1500)),  # Reaction time (Gamma distribution)
depression = round(rnorm(n_subjects, mean = 50, sd = 20)),  # Depression (Normal distribution)
sleep_hours = round(rnorm(n_subjects, mean = 7, sd = 2))  # Average sleep hours (Normal distribution)
)
# Ensuring values are within specified ranges
data$reaction_time[data$reaction_time < 200] <- 200
data$reaction_time[data$reaction_time > 6000] <- 6000
data$depression[data$depression < 0] <- 0
data$depression[data$depression > 100] <- 100
data$sleep_hours[data$sleep_hours < 2] <- 2
data$sleep_hours[data$sleep_hours > 12] <- 12
# Display the data frame
print(data)
#### RUN DESCRIPTIVE STATISTICS ----
# Use the descriptive statistics function
source("functions.R")
# Case 1: Fewer than 10 rows AFTER filtering
tryCatch({
# This should trigger "Data is too short" because the filtered range contains fewer than 10 rows
analysis <- generate_statistics(data, subject_start = 12, subject_end = 15)
print(analysis)
}, error = function(e) {
print(e$message)  # Print the error message
})
# Case 2: Valid range with more than 10 rows
tryCatch({
analysis <- generate_statistics(data, subject_start = 5, subject_end = 15)
print(analysis)
}, error = function(e) {
print(e$message)
})
# Case 2: Valid range with more than 10 rows
tryCatch({
analysis <- generate_statistics(data, subject_start = 1, subject_end = 200)
print(analysis)
}, error = function(e) {
print(e$message)
})
# Case 2: Valid range with more than 10 rows
tryCatch({
analysis <- generate_statistics(data, subject_start = 100, subject_end = 120)
print(analysis)
}, error = function(e) {
print(e$message)
})
