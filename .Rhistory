# R course for beginners
# Week 7 Assignment by < Itamar > < Ronel >, id < 032702391 >
#### SCRIPT 1 - DATA FRAME ----
#### PREPARE WORKSPACE & LOAD DATA ----
# Clean the environment
# Ctrl + Shift + F10 to restart the R session (clear workspace and packages)
# Cmd + Shift + F10 (for mac)
# Ctrl + L to clear the console.
# Create Load function
load_or_install <- function(packages) {
for (pkg in packages) {
if (!require(pkg, character.only = TRUE)) {
install.packages(pkg, dependencies = TRUE)
library(pkg, character.only = TRUE) } } }
# Load required packages
required_packages <- c("dplyr")
load_or_install(required_packages)
cat("All required packages are installed and loaded successfully.\n")
# Define the directory containing the data files
data_dir <- "~/Documents/stroop_data" # Path to the stroop_data folder
# List all CSV files in the directory
files <- dir(data_dir, pattern = "\\.csv$", full.names = TRUE)
# Initialize the data frame with the first file
df <- read.csv(files[1])
# Loop through the remaining files and append them
for (i in 2:length(files)) {
current_file <- read.csv(files[i])
df <- rbind(df, current_file)
}
# Add 'task' and 'congruency' variables
df <- df |>
mutate(
task = ifelse(grepl("word_reading", condition), "word_reading", "ink_naming"),
congruency = ifelse(grepl("_cong$", condition), "congruent", "incongruent")
)
# Add the 'accuracy' variable as a logical variable
df <- df |>
mutate(accuracy = as.logical(participant_response == correct_response))
# Filter relevant columns and convert variable types
df <- df %>%
select(subject, task, congruency, block, trial, accuracy, rt) %>%
mutate(
subject = as.factor(subject),
task = as.factor(task),
congruency = as.factor(congruency),
block = as.factor(block),
trial = as.numeric(trial),
accuracy = as.logical(accuracy),
rt = as.numeric(rt)
)
# Recode factors for regression
df <- df %>%
mutate(
task = relevel(task, ref = "word_reading"), # Set "word_reading" as the reference level
congruency = relevel(congruency, ref = "congruent") # Set "congruent" as the reference level
)
# View the levels of the factors
levels(df$task)
levels(df$congruency)
# View the updated data frame structure
str(df)
head(df, 20)
# Save the data frame as an RData file
save(df, file = "raw_data.RData")
#### SCRIPT 3 - DESCRIPTIVE STATISTICS WITH PLOTS ----
#### PREPARE WORKSPACE & LOAD DATA ----
# Clean the environment
# Ctrl + Shift + F10 to restart the R session (clear workspace and packages)
# Cmd + Shift + F10 (for mac)
# Ctrl + L to clear the console.
# Load required packages
required_packages <- c("dplyr", "ggplot2")
load_or_install(required_packages)
cat("All required packages are installed and loaded successfully.\n")
# Load the filtered data
load("filtered_data.RData")
# R course for beginners
# Week 7 Assignment by < Itamar > < Ronel >, id < 032702391 >
#### SCRIPT 1 - DATA FRAME ----
#### PREPARE WORKSPACE & LOAD DATA ----
# Clean the environment
# Ctrl + Shift + F10 to restart the R session (clear workspace and packages)
# Cmd + Shift + F10 (for mac)
# Ctrl + L to clear the console.
# Create Load function
load_or_install <- function(packages) {
for (pkg in packages) {
if (!require(pkg, character.only = TRUE)) {
install.packages(pkg, dependencies = TRUE)
library(pkg, character.only = TRUE) } } }
# Load required packages
required_packages <- c("dplyr")
load_or_install(required_packages)
cat("All required packages are installed and loaded successfully.\n")
# Define the directory containing the data files
data_dir <- "~/Documents/stroop_data" # Path to the stroop_data folder
# List all CSV files in the directory
files <- dir(data_dir, pattern = "\\.csv$", full.names = TRUE)
# Initialize the data frame with the first file
df <- read.csv(files[1])
# Loop through the remaining files and append them
for (i in 2:length(files)) {
current_file <- read.csv(files[i])
df <- rbind(df, current_file)
}
# Add 'task' and 'congruency' variables
df <- df |>
mutate(
task = ifelse(grepl("word_reading", condition), "word_reading", "ink_naming"),
congruency = ifelse(grepl("_cong$", condition), "congruent", "incongruent")
)
# Add the 'accuracy' variable as a logical variable
df <- df |>
mutate(accuracy = as.logical(participant_response == correct_response))
# Filter relevant columns and convert variable types
df <- df %>%
select(subject, task, congruency, block, trial, accuracy, rt) %>%
mutate(
subject = as.factor(subject),
task = as.factor(task),
congruency = as.factor(congruency),
block = as.factor(block),
trial = as.numeric(trial),
accuracy = as.logical(accuracy),
rt = as.numeric(rt)
)
# Recode factors for regression
df <- df %>%
mutate(
task = relevel(task, ref = "word_reading"), # Set "word_reading" as the reference level
congruency = relevel(congruency, ref = "congruent") # Set "congruent" as the reference level
)
# View the levels of the factors
levels(df$task)
levels(df$congruency)
# View the updated data frame structure
str(df)
head(df, 20)
# Save the data frame as an RData file
save(df, file = "raw_data.RData")
#### SCRIPT 2 - FILTERED DATA ----
#### PREPARE WORKSPACE & LOAD DATA ----
# Clean the environment
# Ctrl + Shift + F10 to restart the R session (clear workspace and packages)
# Cmd + Shift + F10 (for mac)
# Ctrl + L to clear the console.
# Load required packages
required_packages <- c("dplyr")
load_or_install(required_packages)
cat("All required packages are installed and loaded successfully.\n")
# Load the raw data file
load("raw_data.RData")
# Check the structure of the loaded data
glimpse(df)
#### CALCULATE RETAINED PERCENTAGES ----
# Calculate original trials per subject
original_trial_counts <- df |>
group_by(subject) |>
summarise(original_trials = n()) |>
ungroup()
# Filter the data: remove NA and unreasonable reaction times
df_filtered <- df |>
filter(!is.na(rt), !is.na(accuracy)) |>
filter(rt >= 300, rt <= 3000)
# Check for remaining NA values and out-of-bounds reaction times
validation_checks <- df_filtered |>
summarise(
na_in_rt = sum(is.na(rt)),
na_in_accuracy = sum(is.na(accuracy)),
out_of_bounds_rt = sum(rt < 300 | rt > 3000)
)
# View the validation results
glimpse(df_filtered)
# Check for remaining NA values and out-of-bounds rt (should all be zero)
print(validation_checks)
#### SUMMARY STATISTICS ----
# Calculate retained trial percentages for each subject
retained_trial_counts <- df_filtered |>
group_by(subject) |>
summarise(retained_trials = n()) |>
ungroup()
# Merge original and retained counts
trial_summary <- original_trial_counts |>
left_join(retained_trial_counts, by = "subject") |>
mutate(
retained_percent = (retained_trials / original_trials) * 100
)
# Calculate summary statistics
summary_stats <- trial_summary |>
summarise(
num_subjects = n_distinct(subject),
mean_retained = mean(retained_percent, na.rm = TRUE),
sd_retained = sd(retained_percent, na.rm = TRUE)
)
# Print the summary statistics
print(summary_stats)
# SAVE FILTERED DATA
# Save the filtered data to an RData file
save(df_filtered, file = "filtered_data.RData")
cat("Filtered data saved successfully to 'filtered_data.RData'\n")
#### SCRIPT 3 - DESCRIPTIVE STATISTICS WITH PLOTS ----
#### PREPARE WORKSPACE & LOAD DATA ----
# Clean the environment
# Ctrl + Shift + F10 to restart the R session (clear workspace and packages)
# Cmd + Shift + F10 (for mac)
# Ctrl + L to clear the console.
# Load required packages
required_packages <- c("dplyr", "ggplot2")
load_or_install(required_packages)
cat("All required packages are installed and loaded successfully.\n")
# Load the filtered data
load("filtered_data.RData")
#### DEFINE COLOR INDEX ----
color_index <- list(
congruency_colors = c("congruent" = "#ffd5ca", "incongruent" = "#fdd89f")
)
#### DESCRIPTIVE STATISTICS ----
# Accuracy by condition
accuracy_by_condition <- df_filtered |>
group_by(task, congruency) |>
summarise(mean_accuracy = mean(accuracy, na.rm = TRUE) * 100) |> # Convert to percentage
ungroup()
# Reaction Time Descriptive Stats
rt_stats <- df_filtered |>
group_by(task, congruency) |>
summarise(
mean_rt = mean(rt, na.rm = TRUE),
sd_rt = sd(rt, na.rm = TRUE)
) |>
ungroup()
# Print the statistics
print("Accuracy by condition:")
print(accuracy_by_condition)
print("Reaction time descriptive statistics:")
print(rt_stats)
#### PLOTS ----
# Accuracy by condition plot
ggplot(accuracy_by_condition, aes(x = task, y = mean_accuracy, fill = congruency)) +
geom_bar(stat = "identity", position = position_dodge(), color = "black") +
scale_fill_manual(values = color_index$congruency_colors) +
geom_text(
aes(label = sprintf("%.1f%%", mean_accuracy)),
position = position_dodge(0.9),
vjust = -0.5
) +
labs(
title = "Accuracy by Condition",
x = "Task",
y = "Mean Accuracy (%)",
fill = "Congruency"
) +
theme_minimal()
# PLOT REACTION TIME BY TASK AND CONGRUENCY
ggplot(rt_stats, aes(x = task, y = mean_rt, fill = congruency)) +
geom_bar(stat = "identity", position = position_dodge(), color = "black") +
geom_errorbar(
aes(ymin = mean_rt - sd_rt, ymax = mean_rt + sd_rt),
width = 0.2, position = position_dodge(0.9)
) +
scale_fill_manual(values = color_index$congruency_colors) + # Use colors from the index
labs(
title = "Mean Reaction Time by Task and Congruency",
x = "Task",
y = "Mean Reaction Time (ms)",
fill = "Congruency"
) +
theme_minimal()
# HISTOGRAM OF REACTION TIMES
ggplot(df_filtered, aes(x = rt, fill = congruency)) +
geom_histogram(position = "identity", alpha = 0.7, bins = 30, color = "black") +
scale_fill_manual(values = color_index$congruency_colors) +
labs(
title = "Histogram of Reaction Times by Congruency",
x = "Reaction Time (ms)",
y = "Count",
fill = "Congruency"
) +
theme_minimal()
#### SCRIPT 3 - DESCRIPTIVE STATISTICS WITH PLOTS ----
#### PREPARE WORKSPACE & LOAD DATA ----
# Clean the environment
# Ctrl + Shift + F10 to restart the R session (clear workspace and packages)
# Cmd + Shift + F10 (for mac)
# Ctrl + L to clear the console.
# Load required packages
required_packages <- c("dplyr", "ggplot2")
load_or_install(required_packages)
cat("All required packages are installed and loaded successfully.\n")
# Load the filtered data
load("filtered_data.RData")
# R course for beginners
# Week 7 Assignment by < Itamar > < Ronel >, id < 032702391 >
#### SCRIPT 1 - DATA FRAME ----
#### PREPARE WORKSPACE & LOAD DATA ----
# Clean the environment
# Ctrl + Shift + F10 to restart the R session (clear workspace and packages)
# Cmd + Shift + F10 (for mac)
# Ctrl + L to clear the console.
# Create Load function
load_or_install <- function(packages) {
for (pkg in packages) {
if (!require(pkg, character.only = TRUE)) {
install.packages(pkg, dependencies = TRUE)
library(pkg, character.only = TRUE) } } }
# Load required packages
required_packages <- c("dplyr")
load_or_install(required_packages)
cat("All required packages are installed and loaded successfully.\n")
# Define the directory containing the data files
data_dir <- "~/Documents/stroop_data" # Path to the stroop_data folder
# List all CSV files in the directory
files <- dir(data_dir, pattern = "\\.csv$", full.names = TRUE)
# Initialize the data frame with the first file
df <- read.csv(files[1])
# Loop through the remaining files and append them
for (i in 2:length(files)) {
current_file <- read.csv(files[i])
df <- rbind(df, current_file)
}
# Add 'task' and 'congruency' variables
df <- df |>
mutate(
task = ifelse(grepl("word_reading", condition), "word_reading", "ink_naming"),
congruency = ifelse(grepl("_cong$", condition), "congruent", "incongruent")
)
# Add the 'accuracy' variable as a logical variable
df <- df |>
mutate(accuracy = as.logical(participant_response == correct_response))
# Filter relevant columns and convert variable types
df <- df %>%
select(subject, task, congruency, block, trial, accuracy, rt) %>%
mutate(
subject = as.factor(subject),
task = as.factor(task),
congruency = as.factor(congruency),
block = as.factor(block),
trial = as.numeric(trial),
accuracy = as.logical(accuracy),
rt = as.numeric(rt)
)
# Recode factors for regression
df <- df %>%
mutate(
task = relevel(task, ref = "word_reading"), # Set "word_reading" as the reference level
congruency = relevel(congruency, ref = "congruent") # Set "congruent" as the reference level
)
# View the levels of the factors
levels(df$task)
levels(df$congruency)
# View the updated data frame structure
str(df)
head(df, 20)
# Save the data frame as an RData file
save(df, file = "raw_data.RData")
#### SCRIPT 2 - FILTERED DATA ----
#### PREPARE WORKSPACE & LOAD DATA ----
# Clean the environment
# Ctrl + Shift + F10 to restart the R session (clear workspace and packages)
# Cmd + Shift + F10 (for mac)
# Ctrl + L to clear the console.
# Load required packages
required_packages <- c("dplyr")
load_or_install(required_packages)
cat("All required packages are installed and loaded successfully.\n")
# Load the raw data file
load("raw_data.RData")
# Check the structure of the loaded data
glimpse(df)
#### CALCULATE RETAINED PERCENTAGES ----
# Calculate original trials per subject
original_trial_counts <- df |>
group_by(subject) |>
summarise(original_trials = n()) |>
ungroup()
# Filter the data: remove NA and unreasonable reaction times
df_filtered <- df |>
filter(!is.na(rt), !is.na(accuracy)) |>
filter(rt >= 300, rt <= 3000)
# Check for remaining NA values and out-of-bounds reaction times
validation_checks <- df_filtered |>
summarise(
na_in_rt = sum(is.na(rt)),
na_in_accuracy = sum(is.na(accuracy)),
out_of_bounds_rt = sum(rt < 300 | rt > 3000)
)
# View the validation results
glimpse(df_filtered)
# Check for remaining NA values and out-of-bounds rt (should all be zero)
print(validation_checks)
#### SUMMARY STATISTICS ----
# Calculate retained trial percentages for each subject
retained_trial_counts <- df_filtered |>
group_by(subject) |>
summarise(retained_trials = n()) |>
ungroup()
# Merge original and retained counts
trial_summary <- original_trial_counts |>
left_join(retained_trial_counts, by = "subject") |>
mutate(
retained_percent = (retained_trials / original_trials) * 100
)
# Calculate summary statistics
summary_stats <- trial_summary |>
summarise(
num_subjects = n_distinct(subject),
mean_retained = mean(retained_percent, na.rm = TRUE),
sd_retained = sd(retained_percent, na.rm = TRUE)
)
# Print the summary statistics
print(summary_stats)
# SAVE FILTERED DATA
# Save the filtered data to an RData file
save(df_filtered, file = "filtered_data.RData")
cat("Filtered data saved successfully to 'filtered_data.RData'\n")
#### SCRIPT 3 - DESCRIPTIVE STATISTICS WITH PLOTS ----
#### PREPARE WORKSPACE & LOAD DATA ----
# Clean the environment
# Ctrl + Shift + F10 to restart the R session (clear workspace and packages)
# Cmd + Shift + F10 (for mac)
# Ctrl + L to clear the console.
# Load required packages
required_packages <- c("dplyr", "ggplot2")
load_or_install(required_packages)
cat("All required packages are installed and loaded successfully.\n")
# Load the filtered data
load("filtered_data.RData")
#### DEFINE COLOR INDEX ----
color_index <- list(
congruency_colors = c("congruent" = "#ffd5ca", "incongruent" = "#fdd89f")
)
#### DESCRIPTIVE STATISTICS ----
# Accuracy by condition
accuracy_by_condition <- df_filtered |>
group_by(task, congruency) |>
summarise(mean_accuracy = mean(accuracy, na.rm = TRUE) * 100) |> # Convert to percentage
ungroup()
# Reaction Time Descriptive Stats
rt_stats <- df_filtered |>
group_by(task, congruency) |>
summarise(
mean_rt = mean(rt, na.rm = TRUE),
sd_rt = sd(rt, na.rm = TRUE)
) |>
ungroup()
# Print the statistics
print("Accuracy by condition:")
print(accuracy_by_condition)
print("Reaction time descriptive statistics:")
print(rt_stats)
#### PLOTS ----
# Accuracy by condition plot
ggplot(accuracy_by_condition, aes(x = task, y = mean_accuracy, fill = congruency)) +
geom_bar(stat = "identity", position = position_dodge(), color = "black") +
scale_fill_manual(values = color_index$congruency_colors) +
geom_text(
aes(label = sprintf("%.1f%%", mean_accuracy)),
position = position_dodge(0.9),
vjust = -0.5
) +
labs(
title = "Accuracy by Condition",
x = "Task",
y = "Mean Accuracy (%)",
fill = "Congruency"
) +
theme_minimal()
# Save plot
ggsave(
filename = "Week7/accuracy_by_condition.png",
width = 8, height = 6, units = "in"
)
# PLOT REACTION TIME BY TASK AND CONGRUENCY
ggplot(rt_stats, aes(x = task, y = mean_rt, fill = congruency)) +
geom_bar(stat = "identity", position = position_dodge(), color = "black") +
geom_errorbar(
aes(ymin = mean_rt - sd_rt, ymax = mean_rt + sd_rt),
width = 0.2, position = position_dodge(0.9)
) +
scale_fill_manual(values = color_index$congruency_colors) +
labs(
title = "Mean Reaction Time by Task and Congruency",
x = "Task",
y = "Mean Reaction Time (ms)",
fill = "Congruency"
) +
theme_minimal()
# Save plot
ggsave(
filename = "Week7/reaction_time_by_task_and_congruency.png",
width = 8, height = 6, units = "in"
)
# HISTOGRAM OF REACTION TIMES
ggplot(df_filtered, aes(x = rt, fill = congruency)) +
geom_histogram(position = "identity", alpha = 0.7, bins = 30, color = "black") +
scale_fill_manual(values = color_index$congruency_colors) +
labs(
title = "Histogram of Reaction Times by Congruency",
x = "Reaction Time (ms)",
y = "Count",
fill = "Congruency"
) +
theme_minimal()
# Save plot
ggsave(
filename = "Week7/histogram_of_reaction_times.png",
width = 8, height = 6, units = "in"
)
