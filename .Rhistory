rm(list = ls())
cat("\014")  # Clear the console
# Load required packages
library(dplyr)
library(tidyr)
# Set Working Directory path
setwd("/Users/itamar/Documents/GitHub/r_course")
# Load dataset
titanic <- read.csv("data/titanic.csv")
# Check column names and head
names(titanic)
head(titanic)
#### PREPARE DATA FRAME ----
# Rename column 'sex' to 'gender'
titanic <- rename(titanic, Gender = Sex)
# Convert 'gender' to a factor and set "male" as the reference level
titanic$gender <- factor(titanic$Gender, levels = c("male", "female"))
# Check the structure of the 'gender' variable
str(titanic$Gender)
# Create a new factor variable: "1st" remains "1st", while "2nd" and "3rd" are recoded as "Other"
titanic$first_class <- factor(ifelse(titanic$Pclass == "1st", "1st", "Other"), levels = c("1st", "Other"))
# R course for beginners
# Week 10 Assignment by < Itamar > < Ronel >, id < 032702391 >
# Script: Data coding & Di
#### SCRIPT 1 - DATA FRAME & DESCRIPTIVE STATISTICS ----
#### PREPARE WORKSPACE ----
# Clean the environment
rm(list = ls())
cat("\014")  # Clear the console
# Load required packages
library(dplyr)
library(tidyr)
# Set Working Directory path
setwd("/Users/itamar/Documents/GitHub/r_course")
# Load dataset
titanic <- read.csv("data/titanic.csv")
# Check column names and head
names(titanic)
head(titanic)
#### PREPARE DATA FRAME ----
# Rename column 'sex' to 'gender'
titanic <- rename(titanic, Gender = Sex)
# Convert 'gender' to a factor and set "male" as the reference level
titanic$gender <- factor(titanic$Gender, levels = c("male", "female"))
# Check the structure of the 'gender' variable
str(titanic$Gender)
# Recode Pclass into a new factor without converting to character
titanic$first_class <- recode_factor(titanic$Pclass,
"1st" = "1st",
"2nd" = "Other",
"3rd" = "Other")
# R course for beginners
# Week 10 Assignment by < Itamar > < Ronel >, id < 032702391 >
# Script: Data coding & Di
#### SCRIPT 1 - DATA FRAME & DESCRIPTIVE STATISTICS ----
#### PREPARE WORKSPACE ----
# Clean the environment
rm(list = ls())
cat("\014")  # Clear the console
# Load required packages
library(dplyr)
library(tidyr)
# Set Working Directory path
setwd("/Users/itamar/Documents/GitHub/r_course")
# Load dataset
titanic <- read.csv("data/titanic.csv")
# Check column names and head
names(titanic)
head(titanic)
#### PREPARE DATA FRAME ----
# Rename column 'sex' to 'gender'
titanic <- rename(titanic, Gender = Sex)
# Convert 'gender' to a factor and set "male" as the reference level
titanic$gender <- factor(titanic$Gender, levels = c("male", "female"))
# Check the structure of the 'gender' variable
str(titanic$Gender)
# Ensure Pclass is treated as a character before applying ifelse()
titanic$first_class <- factor(ifelse(as.character(titanic$Pclass) == "1st", "1st", "Other"),
levels = c("1st", "Other"))
table(titanic$Pclass)
levels(titanic$Pclass)  # If Pclass is a factor, check its levels
# R course for beginners
# Week 10 Assignment by < Itamar > < Ronel >, id < 032702391 >
# Script: Data coding & Di
#### SCRIPT 1 - DATA FRAME & DESCRIPTIVE STATISTICS ----
#### PREPARE WORKSPACE ----
# Clean the environment
rm(list = ls())
cat("\014")  # Clear the console
# Load required packages
library(dplyr)
library(tidyr)
# Set Working Directory path
setwd("/Users/itamar/Documents/GitHub/r_course")
# Load dataset
titanic <- read.csv("data/titanic.csv")
# Check column names and head
names(titanic)
head(titanic)
#### PREPARE DATA FRAME ----
# Rename column 'sex' to 'gender'
titanic <- rename(titanic, Gender = Sex)
# Convert 'gender' to a factor and set "male" as the reference level
titanic$gender <- factor(titanic$Gender, levels = c("male", "female"))
# Check the structure of the 'gender' variable
str(titanic$Gender)
# Ensure Pclass is treated as a character before applying ifelse()
titanic$first_class <- factor(ifelse(as.character(titanic$PClass) == "1st", "1st", "Other"),
levels = c("1st", "Other"))
# Check the distribution
table(titanic$first_class)
# R course for beginners
# Week 10 Assignment by < Itamar > < Ronel >, id < 032702391 >
# Script: Data coding & Di
#### SCRIPT 1 - DATA FRAME & DESCRIPTIVE STATISTICS ----
#### PREPARE WORKSPACE ----
# Clean the environment
rm(list = ls())
cat("\014")  # Clear the console
# Load required packages
library(dplyr)
library(tidyr)
# Set Working Directory path
setwd("/Users/itamar/Documents/GitHub/r_course")
# Load dataset
titanic <- read.csv("data/titanic.csv")
# Check column names and head
names(titanic)
head(titanic)
#### PREPARE DATA FRAME ----
# Rename column 'Sex' to 'Gender'
titanic <- rename(titanic, Gender = Sex)
# Convert 'Gender' to a factor and set "male" as the reference level
titanic$Gender <- factor(titanic$Gender, levels = c("male", "female"))
# Check the structure of the 'Gender' variable
str(titanic$Gender)
# Ensure Pclass is treated as a character before applying ifelse()
titanic$Class <- factor(ifelse(as.character(titanic$PClass) == "1st", "1st", "Other"),
levels = c("1st", "Other"))
# Check the distribution
table(titanic$Class)
#### DESCRIPTIVE STATISTICS ----
# Load required package
library(dplyr)
# Summarize data by Class & Gender
desc_stats <- titanic %>%
group_by(Class, Gender) %>%
summarise(
total_passengers = n(),
survivors = sum(Survived),
non_survivors = total_passengers - survivors,
survival_rate = mean(Survived),
sd_survival = sd(Survived)
) %>%
ungroup()
# Summarize total passengers and survival per Class (ignoring Gender)
class_stats <- titanic %>%
group_by(Class) %>%
summarise(
total_passengers = n(),
survivors = sum(Survived),
non_survivors = total_passengers - survivors,
survival_rate = mean(Survived),
sd_survival = sd(Survived)
) %>%
ungroup()
# Print results
print("Descriptive Statistics by Class & Gender:")
print(desc_stats)
print("Overall Descriptive Statistics by Class:")
print(class_stats)
# R course for beginners
# Week 10 Assignment by < Itamar > < Ronel >, ID < 032702391 >
# Script: Logistic Regression Model Comparison
#### SCRIPT 2 - LOGISTIC REGRESSION MODELS ----
#### PREPARE WORKSPACE ----
# Clean the environment
rm(list = ls())
cat("\014")  # Clear the console
# Load required packages
library(dplyr)
# Load dataset (assumes Script 1 was already run)
titanic <- read.csv("data/titanic.csv")
# Reapply factor transformations from Script 1
titanic <- titanic %>%
rename(Gender = Sex) %>%
mutate(
Gender = factor(Gender, levels = c("male", "female")),
Class = factor(ifelse(as.character(PClass) == "1st", "1st", "Other"), levels = c("1st", "Other"))
)
#### FIT LOGISTIC REGRESSION MODELS ----
# Model 1: Intercept-only
mod1 <- glm(Survived ~ 1, data = titanic, family = binomial())
# Model 2: Intercept + Gender
mod2 <- glm(Survived ~ Gender, data = titanic, family = binomial())
# Model 3: Intercept + Gender + Class
mod3 <- glm(Survived ~ Gender + Class, data = titanic, family = binomial())
#### PRINT MODEL SUMMARIES ----
print("Summary of Model 1 (Intercept-only):")
summary(mod1)
print("Summary of Model 2 (Intercept + Gender):")
summary(mod2)
print("Summary of Model 3 (Intercept + Gender + Class):")
summary(mod3)
#### ROC ANALYSIS ----
# Load required package
library(pROC)
# Compute predicted probabilities for each model
pred1 <- predict(mod1, type = "response")
pred2 <- predict(mod2, type = "response")
pred3 <- predict(mod3, type = "response")
# Compute ROC curves
roc1 <- roc(titanic$Survived, pred1)
roc2 <- roc(titanic$Survived, pred2)
roc3 <- roc(titanic$Survived, pred3)
# Compute AUC values
auc1 <- auc(roc1)
auc2 <- auc(roc2)
auc3 <- auc(roc3)
# Print AUC values
print(paste("AUC for Model 1 (Intercept-only):", round(auc1, 3)))
print(paste("AUC for Model 2 (Gender):", round(auc2, 3)))
print(paste("AUC for Model 3 (Gender + Class):", round(auc3, 3)))
#### PLOT ROC CURVES ----
# Load required package
library(ggplot2)
# Create a ggplot ROC curve
ggplot() +
geom_line(data = data.frame(roc1$fpr, roc1$tpr), aes(x = roc1.fpr, y = roc1.tpr, color = "Model 1 (Intercept)"), size = 1) +
geom_line(data = data.frame(roc2$fpr, roc2$tpr), aes(x = roc2.fpr, y = roc2.tpr, color = "Model 2 (Gender)"), size = 1) +
geom_line(data = data.frame(roc3$fpr, roc3$tpr), aes(x = roc3.fpr, y = roc3.tpr, color = "Model 3 (Gender + Class)"), size = 1) +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "gray") +  # Random baseline
labs(title = "ROC Curves for Logistic Regression Models",
x = "False Positive Rate (1 - Specificity)",
y = "True Positive Rate (Sensitivity)",
color = "Model") +
theme_minimal()
# R course for beginners
# Week 10 Assignment by < Itamar > < Ronel >, ID < 032702391 >
# Script: Logistic Regression Model Comparison
#### SCRIPT 2 - LOGISTIC REGRESSION MODELS ----
#### PREPARE WORKSPACE ----
# Clean the environment
rm(list = ls())
cat("\014")  # Clear the console
# Load required packages
library(dplyr)
# Load dataset (assumes Script 1 was already run)
titanic <- read.csv("data/titanic.csv")
# Reapply factor transformations from Script 1
titanic <- titanic %>%
rename(Gender = Sex) %>%
mutate(
Gender = factor(Gender, levels = c("male", "female")),
Class = factor(ifelse(as.character(PClass) == "1st", "1st", "Other"), levels = c("1st", "Other"))
)
#### FIT LOGISTIC REGRESSION MODELS ----
# Model 1: Intercept-only
mod1 <- glm(Survived ~ 1, data = titanic, family = binomial())
# Model 2: Intercept + Gender
mod2 <- glm(Survived ~ Gender, data = titanic, family = binomial())
# Model 3: Intercept + Gender + Class
mod3 <- glm(Survived ~ Gender + Class, data = titanic, family = binomial())
#### PRINT MODEL SUMMARIES ----
print("Summary of Model 1 (Intercept-only):")
summary(mod1)
print("Summary of Model 2 (Intercept + Gender):")
summary(mod2)
print("Summary of Model 3 (Intercept + Gender + Class):")
summary(mod3)
#### ROC ANALYSIS ----
# Load required package
library(pROC)
# Compute predicted probabilities for each model
pred1 <- predict(mod1, type = "response")
pred2 <- predict(mod2, type = "response")
pred3 <- predict(mod3, type = "response")
# Compute ROC curves
roc1 <- roc(titanic$Survived, pred1)
roc2 <- roc(titanic$Survived, pred2)
roc3 <- roc(titanic$Survived, pred3)
# Compute AUC values
auc1 <- auc(roc1)
auc2 <- auc(roc2)
auc3 <- auc(roc3)
# Print AUC values
print(paste("AUC for Model 1 (Intercept-only):", round(auc1, 3)))
print(paste("AUC for Model 2 (Gender):", round(auc2, 3)))
print(paste("AUC for Model 3 (Gender + Class):", round(auc3, 3)))
#### PLOT ROC CURVES ----
# Load required package
library(ggplot2)
# Create a ggplot ROC curve
ggplot() +
geom_line(data = data.frame(roc1$fpr, roc1$tpr), aes(x = roc1.fpr, y = roc1.tpr, color = "Model 1 (Intercept)"), size = 1) +
geom_line(data = data.frame(roc2$fpr, roc2$tpr), aes(x = roc2.fpr, y = roc2.tpr, color = "Model 2 (Gender)"), size = 1) +
geom_line(data = data.frame(roc3$fpr, roc3$tpr), aes(x = roc3.fpr, y = roc3.tpr, color = "Model 3 (Gender + Class)"), size = 1) +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "gray") +  # Random baseline
labs(title = "ROC Curves for Logistic Regression Models",
x = "False Positive Rate (1 - Specificity)",
y = "True Positive Rate (Sensitivity)",
color = "Model") +
theme_minimal()
# R course for beginners
# Week 10 Assignment by < Itamar > < Ronel >, ID < 032702391 >
# Script: Logistic Regression Model Comparison
#### SCRIPT 2 - LOGISTIC REGRESSION MODELS ----
#### PREPARE WORKSPACE ----
# Clean the environment
rm(list = ls())
cat("\014")  # Clear the console
# Load required packages
library(dplyr)
# Load dataset (assumes Script 1 was already run)
titanic <- read.csv("data/titanic.csv")
# Reapply factor transformations from Script 1
titanic <- titanic %>%
rename(Gender = Sex) %>%
mutate(
Gender = factor(Gender, levels = c("male", "female")),
Class = factor(ifelse(as.character(PClass) == "1st", "1st", "Other"), levels = c("1st", "Other"))
)
#### FIT LOGISTIC REGRESSION MODELS ----
# Model 1: Intercept-only
mod1 <- glm(Survived ~ 1, data = titanic, family = binomial())
# Model 2: Intercept + Gender
mod2 <- glm(Survived ~ Gender, data = titanic, family = binomial())
# Model 3: Intercept + Gender + Class
mod3 <- glm(Survived ~ Gender + Class, data = titanic, family = binomial())
#### PRINT MODEL SUMMARIES ----
print("Summary of Model 1 (Intercept-only):")
summary(mod1)
print("Summary of Model 2 (Intercept + Gender):")
summary(mod2)
print("Summary of Model 3 (Intercept + Gender + Class):")
summary(mod3)
#### ROC ANALYSIS ----
# Load required package
library(pROC)
# Compute predicted probabilities for each model
pred1 <- predict(mod1, type = "response")
pred2 <- predict(mod2, type = "response")
pred3 <- predict(mod3, type = "response")
# Compute ROC curves
roc1 <- roc(titanic$Survived, pred1)
roc2 <- roc(titanic$Survived, pred2)
roc3 <- roc(titanic$Survived, pred3)
# Compute AUC values
auc1 <- auc(roc1)
auc2 <- auc(roc2)
auc3 <- auc(roc3)
# Print AUC values
print(paste("AUC for Model 1 (Intercept-only):", round(auc1, 3)))
print(paste("AUC for Model 2 (Gender):", round(auc2, 3)))
print(paste("AUC for Model 3 (Gender + Class):", round(auc3, 3)))
#### PLOT ROC CURVES ----
# Load required packages
library(ggplot2)
# Create a dataframe for ggplot with FPR & TPR for each model
roc_df <- data.frame(
FPR = c(rev(roc1$specificities), rev(roc2$specificities), rev(roc3$specificities)),
TPR = c(rev(roc1$sensitivities), rev(roc2$sensitivities), rev(roc3$sensitivities)),
Model = rep(c("Model 1 (Intercept)", "Model 2 (Gender)", "Model 3 (Gender + Class)"),
times = c(length(roc1$sensitivities), length(roc2$sensitivities), length(roc3$sensitivities)))
)
# Plot the ROC curves using ggplot2
ggplot(roc_df, aes(x = FPR, y = TPR, color = Model)) +
geom_line(size = 1) +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "gray") +  # Random baseline
labs(title = "ROC Curves for Logistic Regression Models",
x = "False Positive Rate (1 - Specificity)",
y = "True Positive Rate (Sensitivity)",
color = "Model") +
theme_minimal()
# R course for beginners
# Week 10 Assignment by < Itamar > < Ronel >, ID < 032702391 >
# Script: Logistic Regression Model Comparison
#### SCRIPT 2 - LOGISTIC REGRESSION MODELS ----
#### PREPARE WORKSPACE ----
# Clean the environment
rm(list = ls())
cat("\014")  # Clear the console
# Load required packages
library(dplyr)
# Load dataset (assumes Script 1 was already run)
titanic <- read.csv("data/titanic.csv")
# Reapply factor transformations from Script 1
titanic <- titanic %>%
rename(Gender = Sex) %>%
mutate(
Gender = factor(Gender, levels = c("male", "female")),
Class = factor(ifelse(as.character(PClass) == "1st", "1st", "Other"), levels = c("1st", "Other"))
)
#### FIT LOGISTIC REGRESSION MODELS ----
# Model 1: Intercept-only
mod1 <- glm(Survived ~ 1, data = titanic, family = binomial())
# Model 2: Intercept + Gender
mod2 <- glm(Survived ~ Gender, data = titanic, family = binomial())
# Model 3: Intercept + Gender + Class
mod3 <- glm(Survived ~ Gender + Class, data = titanic, family = binomial())
#### PRINT MODEL SUMMARIES ----
print("Summary of Model 1 (Intercept-only):")
summary(mod1)
print("Summary of Model 2 (Intercept + Gender):")
summary(mod2)
print("Summary of Model 3 (Intercept + Gender + Class):")
summary(mod3)
#### ROC ANALYSIS ----
# Load required package
library(pROC)
# Compute predicted probabilities for each model
pred1 <- predict(mod1, type = "response")
pred2 <- predict(mod2, type = "response")
pred3 <- predict(mod3, type = "response")
# Compute ROC curves
roc1 <- roc(titanic$Survived, pred1)
roc2 <- roc(titanic$Survived, pred2)
roc3 <- roc(titanic$Survived, pred3)
# Compute AUC values
auc1 <- auc(roc1)
auc2 <- auc(roc2)
auc3 <- auc(roc3)
# Print AUC values
print(paste("AUC for Model 1 (Intercept-only):", round(auc1, 3)))
print(paste("AUC for Model 2 (Gender):", round(auc2, 3)))
print(paste("AUC for Model 3 (Gender + Class):", round(auc3, 3)))
#### PLOT ROC CURVES ----
# Create a dataframe for ggplot with the correct FPR & TPR
roc_df <- data.frame(
FPR = c(1 - rev(roc1$specificities), 1 - rev(roc2$specificities), 1 - rev(roc3$specificities)),
TPR = c(rev(roc1$sensitivities), rev(roc2$sensitivities), rev(roc3$sensitivities)),
Model = rep(c("Model 1 (Intercept)", "Model 2 (Gender)", "Model 3 (Gender + Class)"),
times = c(length(roc1$sensitivities), length(roc2$sensitivities), length(roc3$sensitivities)))
)
# Plot the corrected ROC curves using ggplot2
ggplot(roc_df, aes(x = FPR, y = TPR, color = Model)) +
geom_line(size = 1) +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "gray") +  # Random baseline
labs(title = "ROC Curves for Logistic Regression Models",
x = "False Positive Rate (1 - Specificity)",
y = "True Positive Rate (Sensitivity)",
color = "Model") +
theme_minimal()
# R course for beginners
# Week 10 Assignment by < Itamar > < Ronel >, ID < 032702391 >
# Script: Logistic Regression Model Comparison
#### SCRIPT 2 - LOGISTIC REGRESSION MODELS ----
#### PREPARE WORKSPACE ----
# Clean the environment
rm(list = ls())
cat("\014")  # Clear the console
# Load required packages
library(dplyr)
library(pROC)
library(ggplot2)
# Load dataset (assumes Script 1 was already run)
titanic <- read.csv("data/titanic.csv")
# Reapply factor transformations from Script 1
titanic <- titanic %>%
rename(Gender = Sex) %>%
mutate(
Gender = factor(Gender, levels = c("male", "female")),
Class = factor(ifelse(as.character(PClass) == "1st", "1st", "Other"), levels = c("1st", "Other"))
)
#### FIT LOGISTIC REGRESSION MODELS ----
# Model 1: Intercept-only
mod1 <- glm(Survived ~ 1, data = titanic, family = binomial())
# Model 2: Intercept + Gender
mod2 <- glm(Survived ~ Gender, data = titanic, family = binomial())
# Model 3: Intercept + Gender + Class
mod3 <- glm(Survived ~ Gender + Class, data = titanic, family = binomial())
#### PRINT MODEL SUMMARIES ----
print("Summary of Model 1 (Intercept-only):")
summary(mod1)
print("Summary of Model 2 (Intercept + Gender):")
summary(mod2)
print("Summary of Model 3 (Intercept + Gender + Class):")
summary(mod3)
#### ROC ANALYSIS ----
# Compute predicted probabilities for each model
pred1 <- predict(mod1, type = "response")
pred2 <- predict(mod2, type = "response")
pred3 <- predict(mod3, type = "response")
# Compute ROC curves
roc1 <- roc(titanic$Survived, pred1)
roc2 <- roc(titanic$Survived, pred2)
roc3 <- roc(titanic$Survived, pred3)
# Compute AUC values
auc1 <- auc(roc1)
auc2 <- auc(roc2)
auc3 <- auc(roc3)
# Print AUC values
print(paste("AUC for Model 1 (Intercept-only):", round(auc1, 3)))
print(paste("AUC for Model 2 (Gender):", round(auc2, 3)))
print(paste("AUC for Model 3 (Gender + Class):", round(auc3, 3)))
#### PLOT ROC CURVES ----
# Create a dataframe for ggplot with the correct FPR & TPR
roc_df <- data.frame(
FPR = c(1 - rev(roc1$specificities), 1 - rev(roc2$specificities), 1 - rev(roc3$specificities)),
TPR = c(rev(roc1$sensitivities), rev(roc2$sensitivities), rev(roc3$sensitivities)),
Model = rep(c("Model 1 (Intercept)", "Model 2 (Gender)", "Model 3 (Gender + Class)"),
times = c(length(roc1$sensitivities), length(roc2$sensitivities), length(roc3$sensitivities)))
)
# Plot the corrected ROC curves using ggplot2
ggplot(roc_df, aes(x = FPR, y = TPR, color = Model)) +
geom_line(size = 1) +
geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "gray") +  # Random baseline
labs(title = "ROC Curves for Logistic Regression Models",
x = "False Positive Rate (1 - Specificity)",
y = "True Positive Rate (Sensitivity)",
color = "Model") +
theme_minimal()
